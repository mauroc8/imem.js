{"version":3,"sources":["compileLegV8.ts","parseLegV8.ts","index.ts"],"names":[],"mappings":"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","file":"src.f124a280.js","sourceRoot":"..\\src","sourcesContent":["\n// ---\n\ntype BinaryDigit = '0' | '1';\n\n// ---\n\ntype BinaryNumber = BinaryDigit[];\n\nfunction b(...args: (string | BinaryNumber)[]): BinaryNumber {\n    return args.flatMap(bHelper);\n}\n\nfunction bHelper(arg: string | BinaryNumber): BinaryNumber {\n    if (arg instanceof Array) {\n        return arg;\n    } else {\n        if (/[^01_]/.test(arg)) {\n            throw `El número ${arg} debería ser un número binario`;\n        }\n\n        return arg.replace(/_/g, '').split('') as BinaryNumber;\n    }\n\n}\n\nfunction decimalToBinary(number: number, amountOfBits: number): BinaryNumber {\n    if (number >= 0) {\n        return b(number.toString(2).padStart(amountOfBits, '0'));\n    } else {\n        return decimalToBinary(\n            Math.pow(2, amountOfBits) + number,\n            amountOfBits\n        );\n    }\n}\n\n// ---\n\ntype HexDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F';\n\nfunction hexDigitToBinary(digit: HexDigit): BinaryNumber {\n    switch (digit) {\n        case '0': return b('0000');\n        case '1': return b('0001');\n        case '2': return b('0010');\n        case '3': return b('0011');\n        case '4': return b('0100');\n        case '5': return b('0101');\n        case '6': return b('0110');\n        case '7': return b('0111');\n        case '8': return b('1000');\n        case '9': return b('1001');\n        case 'A': return b('1010');\n        case 'B': return b('1011');\n        case 'C': return b('1100');\n        case 'D': return b('1101');\n        case 'E': return b('1110');\n        case 'F': return b('1111');\n    }\n}\n\n// ---\n\ntype Nibble = `${BinaryDigit}${BinaryDigit}${BinaryDigit}${BinaryDigit}`;\n\nfunction nibbleToHex(nibble: Nibble): HexDigit {\n    switch (nibble) {\n        case '0000': return '0';\n        case '0001': return '1';\n        case '0010': return '2';\n        case '0011': return '3';\n        case '0100': return '4';\n        case '0101': return '5';\n        case '0110': return '6';\n        case '0111': return '7';\n        case '1000': return '8';\n        case '1001': return '9';\n        case '1010': return 'A';\n        case '1011': return 'B';\n        case '1100': return 'C';\n        case '1101': return 'D';\n        case '1110': return 'E';\n        case '1111': return 'F';\n    }\n}\n\n// ---\n\ntype HexNumber = HexDigit[];\n\nfunction h(str: string): HexNumber {\n    if (/[^0123456789ABCDEF_]/.test(str)) {\n        throw `El número ${str} debería ser un número hexadecimal`;\n    }\n\n    return str.replace(/_/g, '').split('') as HexNumber;\n}\n\n\nfunction binaryToHex(binary: BinaryNumber): HexNumber {\n    if (binary.length < 4) {\n\n        if (binary.length !== 0) {\n            throw `binaryNumberToHex asume que el número ${binary.join('')} tiene length divisible por 4`;\n        }\n\n        return [];\n    } else {\n        const [a, b, c, d, ...rest] = binary;\n\n        const word: Nibble = `${a}${b}${c}${d}`;\n\n        try {\n            return [nibbleToHex(word), ...binaryToHex(rest)];\n\n        } catch (_) {\n            throw `binaryNumberToHex asume que el número ${binary.join('')} tiene length divisible por 4`;\n        }\n    }\n}\n\n// ---\n\nexport type Register = 'X0' | 'X1' | 'X2' | 'X3' | 'X4' | 'X5' | 'X6' | 'X7' | 'X8' | 'X9'\n    | 'X10' | 'X11' | 'X12' | 'X13' | 'X14' | 'X15' | 'X16' | 'X17' | 'X18' | 'X19'\n    | 'X20' | 'X21' | 'X22' | 'X23' | 'X24' | 'X25' | 'X26' | 'X27' | 'X28' | 'X29'\n    | 'X30' | 'XZR';\n\nconst X0 = 'X0';\nconst X1 = 'X1';\nconst X2 = 'X2';\nconst X3 = 'X3';\nconst X4 = 'X4';\nconst X5 = 'X5';\nconst X6 = 'X6';\nconst X7 = 'X7';\nconst X8 = 'X8';\nconst X9 = 'X9';\nconst X10 = 'X10';\nconst X11 = 'X11';\nconst X12 = 'X12';\nconst X13 = 'X13';\nconst X14 = 'X14';\nconst X15 = 'X15';\nconst X16 = 'X16';\nconst X17 = 'X17';\nconst X18 = 'X18';\nconst X19 = 'X19';\nconst X20 = 'X20';\nconst X21 = 'X21';\nconst X22 = 'X22';\nconst X23 = 'X23';\nconst X24 = 'X24';\nconst X25 = 'X25';\nconst X26 = 'X26';\nconst X27 = 'X27';\nconst X28 = 'X28';\nconst X29 = 'X29';\nconst X30 = 'X30';\nconst XZR = 'XZR';\n\nfunction registerToBinary(register: Register): BinaryNumber {\n    if (register === 'XZR') {\n        return decimalToBinary(31, 5);\n    } else {\n        const match = register.match(/X(\\d+)/);\n\n        if (!match) {\n            throw `Invalid register ${register}`\n        }\n\n        const [_, d] = match;\n        const n = Number(d);\n\n        if (n < 0 || n > 30) {\n            throw `Invalid register ${register}`\n        }\n\n        return decimalToBinary(n, 5);\n    }\n}\n\n// ---\n\ntype SystemRegister = 'S2_0_C0_C0_0' | 'S2_0_C1_C0_0' | 'S2_0_C2_C0_0';\n\nconst ExceptionReturnRegister = 'S2_0_C0_C0_0';\nconst ExceptionLinkRegister = 'S2_0_C1_C0_0';\nconst ExceptionSyndromeRegister = 'S2_0_C2_C0_0';\n\nfunction systemRegisterToBinary(systemRegister: SystemRegister): BinaryNumber {\n    switch (systemRegister) {\n        case 'S2_0_C0_C0_0':\n            return b('0000');\n\n        case 'S2_0_C1_C0_0':\n            return b('0001');\n\n        case 'S2_0_C2_C0_0':\n            return b('0010');\n    }\n}\n\n// ---\n\nexport type Instruction =\n    | { STUR: [Register, Register, number] }\n    | { LDUR: [Register, Register, number] }\n    | { ADD: [Register, Register, Register] }\n    | { SUB: [Register, Register, Register] }\n    | { AND: [Register, Register, Register] }\n    | { ORR: [Register, Register, Register] }\n    | { CBZ: [Register, string] }\n    | { ERET: [] }\n    | { MRS: [Register, SystemRegister] }\n    | { BR: [Register] }\n    | { INVALID_INSTRUCTION: [] }\n\nfunction encodeInstructionToBinary(instruction: Instruction, instructionIndex: number, labelIndex: Record<string, number>): BinaryNumber {\n    if ('STUR' in instruction) {\n        const [rt, rn, dtAddress] = instruction.STUR;\n\n        const opCode = '111_1100_0000';\n\n        return b(\n            opCode,\n            decimalToBinary(dtAddress, 9),\n            '00',\n            registerToBinary(rn),\n            registerToBinary(rt)\n        );\n    }\n\n    if ('LDUR' in instruction) {\n        const [rt, rn, dtAddress] = instruction.LDUR;\n\n        const opCode = '111_1100_0010';\n\n        return b(\n            opCode,\n            decimalToBinary(dtAddress, 9),\n            '00',\n            registerToBinary(rn),\n            registerToBinary(rt)\n        );\n    }\n\n    function rType(args: [Register, Register, Register]): BinaryNumber {\n        const [rd, rn, rm] = args;\n\n        return b(\n            registerToBinary(rm),\n            '000000', // shamt\n            registerToBinary(rn),\n            registerToBinary(rd)\n        );\n    }\n\n    if ('ADD' in instruction) {\n        const opCode = '100_0101_1000';\n\n        return b(opCode, rType(instruction.ADD));\n    }\n\n    if ('SUB' in instruction) {\n        const opCode = '110_0101_1000';\n\n        return b(opCode, rType(instruction.SUB));\n    }\n\n    if ('AND' in instruction) {\n        const opCode = '100_0101_0000';\n\n        return b(opCode, rType(instruction.AND));\n    }\n\n    if ('ORR' in instruction) {\n        const opCode = '101_0101_0000';\n\n        return b(opCode, rType(instruction.ORR));\n    }\n\n    if ('CBZ' in instruction) {\n        const [rt, label] = instruction.CBZ;\n\n        if (typeof labelIndex[label] !== 'number') {\n            throw `Label inexistente: \"${label}\"`;\n        }\n\n        const condBrAddress = labelIndex[label] - instructionIndex;\n\n\n        const opCode = '101_1010_0';\n\n        return b(\n            opCode,\n            decimalToBinary(condBrAddress, 19),\n            registerToBinary(rt)\n        );\n    }\n\n    if ('ERET' in instruction) {\n        const opCode = '1101011_0100';\n\n        return b(\n            opCode,\n            '11111',\n            '000000',\n            '11111',\n            '00000'\n        );\n    }\n\n    if ('MRS' in instruction) {\n        const [rt, systemRegister] = instruction.MRS;\n\n        const opCode = '11010101001';\n\n        return b(\n            opCode,\n            '10',\n            '000',\n            systemRegisterToBinary(systemRegister),\n            '0000',\n            '000',\n            registerToBinary(rt)\n        );\n    }\n\n    if ('BR' in instruction) {\n        const [rn] = instruction.BR;\n\n        const opCode = '1101011_0000';\n\n        return b(\n            opCode,\n            '11111',\n            '000000',\n            registerToBinary(rn),\n            '00000'\n        );\n    }\n\n    if ('INVALID_INSTRUCTION' in instruction) {\n        return repeat('0', 32);\n    }\n\n    throw `Invalid instruction: ${JSON.stringify(instruction)}`;\n}\n\nfunction encodeInstruction(instruction: Instruction, instructionIndex: number, labelIndex: Record<string, number>): HexNumber {\n    return binaryToHex(encodeInstructionToBinary(instruction, instructionIndex, labelIndex));\n}\n\n// ---\n\nexport type Program = (Instruction | string)[];\n\nfunction encode(...originalProgram: Program): string[] {\n    const labelIndex: Record<string, number> = {};\n\n    // a copy to avoid mutating the original program\n    const program = [...originalProgram];\n\n    for (let i = 0; i < program.length; i += 1) {\n        const label = program[i];\n\n        if (typeof label === 'string') {\n            if (label in labelIndex) {\n                throw `El label \"${label}\" está duplicado`;\n            }\n\n            labelIndex[label] = i;\n\n            program.splice(i, 1);\n            i -= 1;\n        }\n    }\n\n    return (program as Instruction[])\n        .map((instruction, index) => encodeInstruction(instruction, index, labelIndex))\n        .map(instruction => instruction.join(''));\n}\n\nexport function compileLegV8(...program: Program): string[] {\n    return encode(...program).map(hex => `32'h${hex}`);\n}\n\nconst NOP: Instruction = { ADD: [XZR, XZR, XZR] };\n\nfunction repeat<A>(value: A, n: number): A[] {\n    if (n <= 0) {\n        return [];\n    } else {\n        return [value, ...repeat(value, n - 1)];\n    }\n}\n\nexport function compileLegV8WithIRS(program: Program, exceptionVector: Program): string[] {\n    const instructionCount = program.reduce(\n        (sum, instructionOrLabel) => typeof instructionOrLabel !== 'string'\n            ? sum + 1\n            : sum,\n        0\n    );\n\n    if (instructionCount >= 54) {\n        throw 'El programa tiene más de 54 instrucciones y sobreescribe el vector de excepciones';\n    }\n\n    return compileLegV8(\n        ...program,\n        ...repeat(NOP, 54 - instructionCount),\n        // El vector de excepciones está en la instrucción nro 54\n        ...exceptionVector,\n    );\n}\n\n","import { compileLegV8, compileLegV8WithIRS, Instruction, Program, Register } from \"./compileLegV8\";\r\n\r\n\r\n\r\nexport function parseLegV8(code: string, isr: string): { code: string, romSize: number } {\r\n    const codeLines = code.split('\\n')\r\n    const isrLines = isr.trim() ? isr.split('\\n') : null\r\n\r\n    try {\r\n        const codeInstructions = codeLines.flatMap(parseLine)\r\n        const compiledCode =\r\n            isrLines\r\n                ? compileLegV8WithIRS(codeInstructions, isrLines.flatMap(parseLine))\r\n                : compileLegV8(...codeInstructions);\r\n\r\n        return {\r\n            code: `'{\r\n      ${compiledCode.join(',\\n      ')}\r\n   };`,\r\n            romSize: compiledCode.length,\r\n        }\r\n    } catch (error) {\r\n        if (typeof error === 'string') {\r\n            return {\r\n                code: `\r\n      ${error}\r\n`, romSize: 0\r\n            }\r\n        } else {\r\n            throw error\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseLine(line: string, index: number): Program {\r\n    // Untrimmed lines\r\n\r\n    if (line !== line.trim()) {\r\n        return parseLine(line.trim(), index)\r\n    }\r\n\r\n    // Empty lines\r\n\r\n    if (line.length === 0) {\r\n        return []\r\n    }\r\n\r\n    // Labels\r\n\r\n    const labelRegExp = /^(\\w+):/\r\n\r\n    const labelMatch = line.match(labelRegExp)\r\n\r\n    if (labelMatch) {\r\n        const [match, label] = labelMatch\r\n\r\n        return [\r\n            label,\r\n            // we continue parsing the rest of the line\r\n            ...parseLine(line.substring(match.length), index)\r\n        ]\r\n    }\r\n\r\n    // R-type\r\n\r\n    const rTypeRegExp = /^(ADD|SUB|AND|ORR)\\s+(X\\d{1,2}|XZR),\\s+(X\\d{1,2}|XZR),\\s+(X\\d{1,2}|XZR)/\r\n\r\n    const rTypeMatch = line.match(rTypeRegExp)\r\n\r\n    if (rTypeMatch) {\r\n        const [_, op, rd, rn, rm] = rTypeMatch\r\n\r\n        if (validateRegister(rd)\r\n            && validateRegister(rn)\r\n            && validateRegister(rm)) {\r\n            switch (op) {\r\n                case 'ADD':\r\n                    return [{ ADD: [rd, rn, rm] }]\r\n\r\n                case 'SUB':\r\n                    return [{ SUB: [rd, rn, rm] }]\r\n\r\n                case 'AND':\r\n                    return [{ AND: [rd, rn, rm] }]\r\n\r\n                case 'ORR':\r\n                    return [{ ORR: [rd, rn, rm] }]\r\n            }\r\n        }\r\n\r\n        throw `Instrucción tipo R inválida en la línea ${index}: \"${line}\"`\r\n    }\r\n\r\n    // LDUR/STUR\r\n\r\n    const dTypeRegex = /^(LDUR|STUR)\\s+(X\\d{1,2}|XZR),\\s+\\[\\s+(X\\d{1,2}|XZR),\\s+#(\\d+)\\s+\\]/\r\n\r\n    const dTypeMatch = line.match(dTypeRegex)\r\n\r\n    if (dTypeMatch) {\r\n        const [_, op, rt, rn, dtAddr] = dTypeMatch\r\n\r\n        if (validateRegister(rt) && validateRegister(rn)) {\r\n            switch (op) {\r\n                case 'LDUR':\r\n                    return [{ LDUR: [rt, rn, Number(dtAddr)] }]\r\n\r\n                case 'STUR':\r\n                    return [{ STUR: [rt, rn, Number(dtAddr)] }]\r\n            }\r\n        }\r\n\r\n        throw `Instrucción tipo D inválida en la línea ${index}: \"${line}\"`\r\n    }\r\n\r\n    // CBZ\r\n\r\n    const cbzRegex = /^CBZ\\s+(X\\d{1,2}|XZR),\\s+(\\w+)/\r\n\r\n    const cbzMatch = line.match(cbzRegex)\r\n\r\n    if (cbzMatch) {\r\n        const [_, rt, label] = cbzMatch\r\n\r\n        if (validateRegister(rt)) {\r\n            return [{ CBZ: [rt, label] }]\r\n        }\r\n\r\n        throw `Instrucción CBZ inválida en la línea ${index}: \"${line}\"`\r\n    }\r\n\r\n    // ERET\r\n\r\n    const eretRegex = /^ERET/\r\n\r\n    const eretMatch = line.match(eretRegex)\r\n\r\n    if (eretMatch) {\r\n        return [{ ERET: [] }]\r\n    }\r\n\r\n    // BR\r\n\r\n    const brRegex = /^BR\\s+(X\\d{1,2}|XZR)/\r\n\r\n    const brMatch = line.match(brRegex)\r\n\r\n    if (brMatch) {\r\n        const [_, rt] = brMatch\r\n\r\n        if (validateRegister(rt)) {\r\n            return [{ BR: [rt] }]\r\n        }\r\n\r\n        throw `Instrucción BR inválida en la línea ${index}: \"${line}\"`\r\n    }\r\n\r\n    // BR\r\n\r\n    const mrsRegExp = /^MRS\\s+(X\\d{1,2}|XZR),\\s+(S2_0_C[012]_C0_0)/\r\n\r\n    const mrsMatch = line.match(mrsRegExp)\r\n\r\n    if (mrsMatch) {\r\n        const [_, rt, systemRegister] = mrsMatch\r\n\r\n        if (validateRegister(rt)\r\n            && (systemRegister === 'S2_0_C0_C0_0'\r\n                || systemRegister === 'S2_0_C1_C0_0'\r\n                || systemRegister === 'S2_0_C2_C0_0'\r\n            )\r\n        ) {\r\n            return [{ MRS: [rt, systemRegister] }]\r\n        }\r\n\r\n        throw `Instrucción MRS inválida en la línea ${index}: \"${line}\"`\r\n    }\r\n\r\n    throw `Instrucción desconocida en la línea ${index}: \"${line}\"`\r\n}\r\n\r\nfunction validateRegister(register: string): register is Register {\r\n    return range(0, 30).map(n => `X${n}`).includes(register) || register === 'XZR'\r\n}\r\n\r\nfunction range(start: number, end: number): number[] {\r\n    return Array.from({ length: end - start + 1 }).map((_, n) => n + start);\r\n}\r\n","import { parseLegV8 } from \"./parseLegV8\"\r\n\r\nwindow.addEventListener('DOMContentLoaded', main)\r\n\r\nfunction main() {\r\n    const codeOutput = document.querySelector('#code-output')\r\n    const romSizeOutput = document.querySelector('#rom-size-output')\r\n    const codeInput = document.querySelector<HTMLTextAreaElement>('#code-input')\r\n    const isrInput = document.querySelector<HTMLTextAreaElement>('#isr-input')\r\n    const copyOutputButton = document.querySelector<HTMLButtonElement>('#copy-output-button')\r\n    const output = document.querySelector('#output')\r\n\r\n    if (!codeOutput || !codeInput || !isrInput || !romSizeOutput || !copyOutputButton || !output) {\r\n        alert('Error: node not found')\r\n        throw { codeOutput, codeInput, isrInput, romSizeOutput, copyOutputButton, output }\r\n    }\r\n\r\n    initializeApp({ codeOutput, isrInput, codeInput, romSizeOutput, copyOutputButton, output })\r\n}\r\n\r\nfunction initializeApp({\r\n    codeInput,\r\n    isrInput,\r\n    codeOutput,\r\n    romSizeOutput,\r\n    copyOutputButton,\r\n    output,\r\n}: {\r\n    codeInput: HTMLTextAreaElement,\r\n    isrInput: HTMLTextAreaElement,\r\n    codeOutput: Element,\r\n    romSizeOutput: Element,\r\n    copyOutputButton: HTMLButtonElement,\r\n    output: Element,\r\n}) {\r\n    // --- update output\r\n\r\n    function updateOutput() {\r\n        const { code, romSize } = parseLegV8(codeInput.value, isrInput.value);\r\n        romSizeOutput.textContent = String(romSize);\r\n        codeOutput.textContent = code;\r\n    }\r\n\r\n    const updateOutputDebounced = debounce(updateOutput, 450)\r\n\r\n    updateOutputDebounced()\r\n\r\n    codeInput.addEventListener('input', updateOutputDebounced)\r\n    isrInput.addEventListener('input', updateOutputDebounced)\r\n\r\n    // --- save/load code input\r\n\r\n    const loadedCodeInput = localStorage.getItem('code-input')\r\n\r\n    if (loadedCodeInput) {\r\n        codeInput.value = loadedCodeInput\r\n    }\r\n\r\n    function saveCodeInput() {\r\n        localStorage.setItem('code-input', codeInput.value)\r\n    }\r\n\r\n    const saveCodeInputDebounced = debounce(saveCodeInput, 800)\r\n\r\n    codeInput.addEventListener('input', saveCodeInputDebounced);\r\n\r\n    // --- save/load isr input\r\n\r\n    const loadedIsrInput = localStorage.getItem('isr-input')\r\n\r\n    if (loadedIsrInput) {\r\n        codeInput.value = loadedIsrInput\r\n    }\r\n\r\n    function saveIsrInput() {\r\n        localStorage.setItem('isr-input', codeInput.value)\r\n    }\r\n\r\n    const saveIsrInputDebounced = debounce(saveIsrInput, 800)\r\n\r\n    isrInput.addEventListener('input', saveIsrInputDebounced);\r\n\r\n    // --- copy output\r\n\r\n    copyOutputButton.addEventListener('click', () => {\r\n        navigator.clipboard.writeText(output.textContent || '')\r\n    })\r\n}\r\n\r\nfunction debounce(fn, ms) {\r\n    let timeout\r\n\r\n\r\n    return () => {\r\n        if (timeout) {\r\n            clearTimeout(timeout)\r\n        }\r\n\r\n        timeout = setTimeout(() => {\r\n            fn()\r\n            timeout = null\r\n        }, ms)\r\n    }\r\n}\r\n"]}